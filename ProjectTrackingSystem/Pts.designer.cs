#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectTrackingSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PTS")]
	public partial class PtsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssign(Assign instance);
    partial void UpdateAssign(Assign instance);
    partial void DeleteAssign(Assign instance);
    partial void InsertTechnicalEmployee(TechnicalEmployee instance);
    partial void UpdateTechnicalEmployee(TechnicalEmployee instance);
    partial void DeleteTechnicalEmployee(TechnicalEmployee instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertCaptureQuotation(CaptureQuotation instance);
    partial void UpdateCaptureQuotation(CaptureQuotation instance);
    partial void DeleteCaptureQuotation(CaptureQuotation instance);
    partial void InsertCheckpoint(Checkpoint instance);
    partial void UpdateCheckpoint(Checkpoint instance);
    partial void DeleteCheckpoint(Checkpoint instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDesignDocument(DesignDocument instance);
    partial void UpdateDesignDocument(DesignDocument instance);
    partial void DeleteDesignDocument(DesignDocument instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertFinancialManager(FinancialManager instance);
    partial void UpdateFinancialManager(FinancialManager instance);
    partial void DeleteFinancialManager(FinancialManager instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertOMAssign(OMAssign instance);
    partial void UpdateOMAssign(OMAssign instance);
    partial void DeleteOMAssign(OMAssign instance);
    partial void InsertOperationalManager(OperationalManager instance);
    partial void UpdateOperationalManager(OperationalManager instance);
    partial void DeleteOperationalManager(OperationalManager instance);
    partial void InsertOutsourceLabor(OutsourceLabor instance);
    partial void UpdateOutsourceLabor(OutsourceLabor instance);
    partial void DeleteOutsourceLabor(OutsourceLabor instance);
    partial void InsertPhase(Phase instance);
    partial void UpdatePhase(Phase instance);
    partial void DeletePhase(Phase instance);
    partial void InsertPhaseCheckpoint(PhaseCheckpoint instance);
    partial void UpdatePhaseCheckpoint(PhaseCheckpoint instance);
    partial void DeletePhaseCheckpoint(PhaseCheckpoint instance);
    partial void InsertPMFeedback(PMFeedback instance);
    partial void UpdatePMFeedback(PMFeedback instance);
    partial void DeletePMFeedback(PMFeedback instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectAttachment(ProjectAttachment instance);
    partial void UpdateProjectAttachment(ProjectAttachment instance);
    partial void DeleteProjectAttachment(ProjectAttachment instance);
    partial void InsertProjectManager(ProjectManager instance);
    partial void UpdateProjectManager(ProjectManager instance);
    partial void DeleteProjectManager(ProjectManager instance);
    partial void InsertPurchaseOrder(PurchaseOrder instance);
    partial void UpdatePurchaseOrder(PurchaseOrder instance);
    partial void DeletePurchaseOrder(PurchaseOrder instance);
    partial void InsertRecruit(Recruit instance);
    partial void UpdateRecruit(Recruit instance);
    partial void DeleteRecruit(Recruit instance);
    partial void InsertSubmit(Submit instance);
    partial void UpdateSubmit(Submit instance);
    partial void DeleteSubmit(Submit instance);
    partial void InsertSubmittedBy(SubmittedBy instance);
    partial void UpdateSubmittedBy(SubmittedBy instance);
    partial void DeleteSubmittedBy(SubmittedBy instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public PtsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PTSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PtsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PtsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PtsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PtsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assign> Assigns
		{
			get
			{
				return this.GetTable<Assign>();
			}
		}
		
		public System.Data.Linq.Table<TechnicalEmployee> TechnicalEmployees
		{
			get
			{
				return this.GetTable<TechnicalEmployee>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<CaptureQuotation> CaptureQuotations
		{
			get
			{
				return this.GetTable<CaptureQuotation>();
			}
		}
		
		public System.Data.Linq.Table<Checkpoint> Checkpoints
		{
			get
			{
				return this.GetTable<Checkpoint>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<DesignDocument> DesignDocuments
		{
			get
			{
				return this.GetTable<DesignDocument>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<FinancialManager> FinancialManagers
		{
			get
			{
				return this.GetTable<FinancialManager>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<OMAssign> OMAssigns
		{
			get
			{
				return this.GetTable<OMAssign>();
			}
		}
		
		public System.Data.Linq.Table<OperationalManager> OperationalManagers
		{
			get
			{
				return this.GetTable<OperationalManager>();
			}
		}
		
		public System.Data.Linq.Table<OutsourceLabor> OutsourceLabors
		{
			get
			{
				return this.GetTable<OutsourceLabor>();
			}
		}
		
		public System.Data.Linq.Table<Phase> Phases
		{
			get
			{
				return this.GetTable<Phase>();
			}
		}
		
		public System.Data.Linq.Table<PhaseCheckpoint> PhaseCheckpoints
		{
			get
			{
				return this.GetTable<PhaseCheckpoint>();
			}
		}
		
		public System.Data.Linq.Table<PMFeedback> PMFeedbacks
		{
			get
			{
				return this.GetTable<PMFeedback>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this.GetTable<ProjectAttachment>();
			}
		}
		
		public System.Data.Linq.Table<ProjectManager> ProjectManagers
		{
			get
			{
				return this.GetTable<ProjectManager>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseOrder> PurchaseOrders
		{
			get
			{
				return this.GetTable<PurchaseOrder>();
			}
		}
		
		public System.Data.Linq.Table<Recruit> Recruits
		{
			get
			{
				return this.GetTable<Recruit>();
			}
		}
		
		public System.Data.Linq.Table<Submit> Submits
		{
			get
			{
				return this.GetTable<Submit>();
			}
		}
		
		public System.Data.Linq.Table<SubmittedBy> SubmittedBies
		{
			get
			{
				return this.GetTable<SubmittedBy>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assigns")]
	public partial class Assign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PMID;
		
		private int _TEID;
		
		private int _ProjectID;
		
		private System.DateTime _DateofAssignment;
		
		private int _NumberofTechnicalEmployee;
		
		private int _UnitCost;
		
		private string _Reason;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnDateofAssignmentChanging(System.DateTime value);
    partial void OnDateofAssignmentChanged();
    partial void OnNumberofTechnicalEmployeeChanging(int value);
    partial void OnNumberofTechnicalEmployeeChanged();
    partial void OnUnitCostChanging(int value);
    partial void OnUnitCostChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public Assign()
		{
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			this._Project = default(EntityRef<Project>);
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofAssignment", DbType="DateTime NOT NULL")]
		public System.DateTime DateofAssignment
		{
			get
			{
				return this._DateofAssignment;
			}
			set
			{
				if ((this._DateofAssignment != value))
				{
					this.OnDateofAssignmentChanging(value);
					this.SendPropertyChanging();
					this._DateofAssignment = value;
					this.SendPropertyChanged("DateofAssignment");
					this.OnDateofAssignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberofTechnicalEmployee", DbType="Int NOT NULL")]
		public int NumberofTechnicalEmployee
		{
			get
			{
				return this._NumberofTechnicalEmployee;
			}
			set
			{
				if ((this._NumberofTechnicalEmployee != value))
				{
					this.OnNumberofTechnicalEmployeeChanging(value);
					this.SendPropertyChanging();
					this._NumberofTechnicalEmployee = value;
					this.SendPropertyChanged("NumberofTechnicalEmployee");
					this.OnNumberofTechnicalEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="Int NOT NULL")]
		public int UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Assign", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Assign", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_Assign", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnicalEmployee")]
	public partial class TechnicalEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEID;
		
		private EntitySet<Assign> _Assigns;
		
		private EntitySet<CaptureQuotation> _CaptureQuotations;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<PhaseCheckpoint> _PhaseCheckpoints;
		
		private EntitySet<ProjectAttachment> _ProjectAttachments;
		
		private EntitySet<Recruit> _Recruits;
		
		private EntitySet<Submit> _Submits;
		
		private EntitySet<SubmittedBy> _SubmittedBies;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    #endregion
		
		public TechnicalEmployee()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._CaptureQuotations = new EntitySet<CaptureQuotation>(new Action<CaptureQuotation>(this.attach_CaptureQuotations), new Action<CaptureQuotation>(this.detach_CaptureQuotations));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._PhaseCheckpoints = new EntitySet<PhaseCheckpoint>(new Action<PhaseCheckpoint>(this.attach_PhaseCheckpoints), new Action<PhaseCheckpoint>(this.detach_PhaseCheckpoints));
			this._ProjectAttachments = new EntitySet<ProjectAttachment>(new Action<ProjectAttachment>(this.attach_ProjectAttachments), new Action<ProjectAttachment>(this.detach_ProjectAttachments));
			this._Recruits = new EntitySet<Recruit>(new Action<Recruit>(this.attach_Recruits), new Action<Recruit>(this.detach_Recruits));
			this._Submits = new EntitySet<Submit>(new Action<Submit>(this.attach_Submits), new Action<Submit>(this.detach_Submits));
			this._SubmittedBies = new EntitySet<SubmittedBy>(new Action<SubmittedBy>(this.attach_SubmittedBies), new Action<SubmittedBy>(this.detach_SubmittedBies));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Assign", Storage="_Assigns", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_CaptureQuotation", Storage="_CaptureQuotations", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<CaptureQuotation> CaptureQuotations
		{
			get
			{
				return this._CaptureQuotations;
			}
			set
			{
				this._CaptureQuotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Document", Storage="_Documents", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_PhaseCheckpoint", Storage="_PhaseCheckpoints", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<PhaseCheckpoint> PhaseCheckpoints
		{
			get
			{
				return this._PhaseCheckpoints;
			}
			set
			{
				this._PhaseCheckpoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_ProjectAttachment", Storage="_ProjectAttachments", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this._ProjectAttachments;
			}
			set
			{
				this._ProjectAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Recruit", Storage="_Recruits", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<Recruit> Recruits
		{
			get
			{
				return this._Recruits;
			}
			set
			{
				this._Recruits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Submit", Storage="_Submits", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<Submit> Submits
		{
			get
			{
				return this._Submits;
			}
			set
			{
				this._Submits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_SubmittedBy", Storage="_SubmittedBies", ThisKey="TEID", OtherKey="TEID")]
		public EntitySet<SubmittedBy> SubmittedBies
		{
			get
			{
				return this._SubmittedBies;
			}
			set
			{
				this._SubmittedBies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TechnicalEmployee", Storage="_Employee", ThisKey="TEID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TechnicalEmployee = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TechnicalEmployee = this;
						this._TEID = value.EmployeeID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
		
		private void attach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = this;
		}
		
		private void detach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.TechnicalEmployee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentID;
		
		private string _Name;
		
		private string _Type;
		
		private string _Description;
		
		private EntitySet<ProjectAttachment> _ProjectAttachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Attachment()
		{
			this._ProjectAttachments = new EntitySet<ProjectAttachment>(new Action<ProjectAttachment>(this.attach_ProjectAttachments), new Action<ProjectAttachment>(this.detach_ProjectAttachments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_ProjectAttachment", Storage="_ProjectAttachments", ThisKey="AttachmentID", OtherKey="AttachmentID")]
		public EntitySet<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this._ProjectAttachments;
			}
			set
			{
				this._ProjectAttachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaptureQuotation")]
	public partial class CaptureQuotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotationID;
		
		private string _Status;
		
		private int _QuantityNeeded;
		
		private int _TotalCost;
		
		private System.DateTime _Date;
		
		private int _BillofQuantity;
		
		private int _TotalSalesPrice;
		
		private int _PaymentTerms;
		
		private string _CompanyName;
		
		private int _ProjectID;
		
		private int _ItemID;
		
		private int _TEID;
		
		private int _PMID;
		
		private EntitySet<Submit> _Submits;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotationIDChanging(int value);
    partial void OnQuotationIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnQuantityNeededChanging(int value);
    partial void OnQuantityNeededChanged();
    partial void OnTotalCostChanging(int value);
    partial void OnTotalCostChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBillofQuantityChanging(int value);
    partial void OnBillofQuantityChanged();
    partial void OnTotalSalesPriceChanging(int value);
    partial void OnTotalSalesPriceChanged();
    partial void OnPaymentTermsChanging(int value);
    partial void OnPaymentTermsChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    #endregion
		
		public CaptureQuotation()
		{
			this._Submits = new EntitySet<Submit>(new Action<Submit>(this.attach_Submits), new Action<Submit>(this.detach_Submits));
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			this._Item = default(EntityRef<Item>);
			this._Project = default(EntityRef<Project>);
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuotationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuotationID
		{
			get
			{
				return this._QuotationID;
			}
			set
			{
				if ((this._QuotationID != value))
				{
					this.OnQuotationIDChanging(value);
					this.SendPropertyChanging();
					this._QuotationID = value;
					this.SendPropertyChanged("QuotationID");
					this.OnQuotationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityNeeded", DbType="Int NOT NULL")]
		public int QuantityNeeded
		{
			get
			{
				return this._QuantityNeeded;
			}
			set
			{
				if ((this._QuantityNeeded != value))
				{
					this.OnQuantityNeededChanging(value);
					this.SendPropertyChanging();
					this._QuantityNeeded = value;
					this.SendPropertyChanged("QuantityNeeded");
					this.OnQuantityNeededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Int NOT NULL")]
		public int TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillofQuantity", DbType="Int NOT NULL")]
		public int BillofQuantity
		{
			get
			{
				return this._BillofQuantity;
			}
			set
			{
				if ((this._BillofQuantity != value))
				{
					this.OnBillofQuantityChanging(value);
					this.SendPropertyChanging();
					this._BillofQuantity = value;
					this.SendPropertyChanged("BillofQuantity");
					this.OnBillofQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSalesPrice", DbType="Int NOT NULL")]
		public int TotalSalesPrice
		{
			get
			{
				return this._TotalSalesPrice;
			}
			set
			{
				if ((this._TotalSalesPrice != value))
				{
					this.OnTotalSalesPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalSalesPrice = value;
					this.SendPropertyChanged("TotalSalesPrice");
					this.OnTotalSalesPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerms", DbType="Int NOT NULL")]
		public int PaymentTerms
		{
			get
			{
				return this._PaymentTerms;
			}
			set
			{
				if ((this._PaymentTerms != value))
				{
					this.OnPaymentTermsChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerms = value;
					this.SendPropertyChanged("PaymentTerms");
					this.OnPaymentTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL")]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL")]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaptureQuotation_Submit", Storage="_Submits", ThisKey="QuotationID", OtherKey="QuotationID")]
		public EntitySet<Submit> Submits
		{
			get
			{
				return this._Submits;
			}
			set
			{
				this._Submits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_CaptureQuotation", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.CaptureQuotations.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.CaptureQuotations.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CaptureQuotation", Storage="_Item", ThisKey="ItemID", OtherKey="ItemID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.CaptureQuotations.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.CaptureQuotations.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CaptureQuotation", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.CaptureQuotations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.CaptureQuotations.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_CaptureQuotation", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.CaptureQuotations.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.CaptureQuotations.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.CaptureQuotation = this;
		}
		
		private void detach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.CaptureQuotation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Checkpoint]")]
	public partial class Checkpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckpointID;
		
		private string _Name;
		
		private System.DateTime _Date;
		
		private string _Status;
		
		private EntitySet<PhaseCheckpoint> _PhaseCheckpoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckpointIDChanging(int value);
    partial void OnCheckpointIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Checkpoint()
		{
			this._PhaseCheckpoints = new EntitySet<PhaseCheckpoint>(new Action<PhaseCheckpoint>(this.attach_PhaseCheckpoints), new Action<PhaseCheckpoint>(this.detach_PhaseCheckpoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckpointID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CheckpointID
		{
			get
			{
				return this._CheckpointID;
			}
			set
			{
				if ((this._CheckpointID != value))
				{
					this.OnCheckpointIDChanging(value);
					this.SendPropertyChanging();
					this._CheckpointID = value;
					this.SendPropertyChanged("CheckpointID");
					this.OnCheckpointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Checkpoint_PhaseCheckpoint", Storage="_PhaseCheckpoints", ThisKey="CheckpointID", OtherKey="CheckpointID")]
		public EntitySet<PhaseCheckpoint> PhaseCheckpoints
		{
			get
			{
				return this._PhaseCheckpoints;
			}
			set
			{
				this._PhaseCheckpoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.Checkpoint = this;
		}
		
		private void detach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.Checkpoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private int _MobileNumer;
		
		private string _Address;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileNumerChanging(int value);
    partial void OnMobileNumerChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumer", DbType="Int NOT NULL")]
		public int MobileNumer
		{
			get
			{
				return this._MobileNumer;
			}
			set
			{
				if ((this._MobileNumer != value))
				{
					this.OnMobileNumerChanging(value);
					this.SendPropertyChanging();
					this._MobileNumer = value;
					this.SendPropertyChanged("MobileNumer");
					this.OnMobileNumerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DesignDocument")]
	public partial class DesignDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignDocumentID;
		
		private string _Name;
		
		private string _Status;
		
		private string _Layout;
		
		private string _Description;
		
		private int _PMID;
		
		private EntitySet<SubmittedBy> _SubmittedBies;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignDocumentIDChanging(int value);
    partial void OnDesignDocumentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnLayoutChanging(string value);
    partial void OnLayoutChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    #endregion
		
		public DesignDocument()
		{
			this._SubmittedBies = new EntitySet<SubmittedBy>(new Action<SubmittedBy>(this.attach_SubmittedBies), new Action<SubmittedBy>(this.detach_SubmittedBies));
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DesignDocumentID
		{
			get
			{
				return this._DesignDocumentID;
			}
			set
			{
				if ((this._DesignDocumentID != value))
				{
					this.OnDesignDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DesignDocumentID = value;
					this.SendPropertyChanged("DesignDocumentID");
					this.OnDesignDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Layout", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Layout
		{
			get
			{
				return this._Layout;
			}
			set
			{
				if ((this._Layout != value))
				{
					this.OnLayoutChanging(value);
					this.SendPropertyChanging();
					this._Layout = value;
					this.SendPropertyChanged("Layout");
					this.OnLayoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL")]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignDocument_SubmittedBy", Storage="_SubmittedBies", ThisKey="DesignDocumentID", OtherKey="DesignDocumentID")]
		public EntitySet<SubmittedBy> SubmittedBies
		{
			get
			{
				return this._SubmittedBies;
			}
			set
			{
				this._SubmittedBies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_DesignDocument", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.DesignDocuments.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.DesignDocuments.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.DesignDocument = this;
		}
		
		private void detach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.DesignDocument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhaseID;
		
		private int _TEID;
		
		private int _ProjectID;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
		private EntityRef<Phase> _Phase;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhaseIDChanging(int value);
    partial void OnPhaseIDChanged();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public Document()
		{
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			this._Phase = default(EntityRef<Phase>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhaseID
		{
			get
			{
				return this._PhaseID;
			}
			set
			{
				if ((this._PhaseID != value))
				{
					if (this._Phase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhaseIDChanging(value);
					this.SendPropertyChanging();
					this._PhaseID = value;
					this.SendPropertyChanged("PhaseID");
					this.OnPhaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Document", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_Document", Storage="_Phase", ThisKey="PhaseID", OtherKey="PhaseID", IsForeignKey=true)]
		public Phase Phase
		{
			get
			{
				return this._Phase.Entity;
			}
			set
			{
				Phase previousValue = this._Phase.Entity;
				if (((previousValue != value) 
							|| (this._Phase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phase.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Phase.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._PhaseID = value.PhaseID;
					}
					else
					{
						this._PhaseID = default(int);
					}
					this.SendPropertyChanged("Phase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Document", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedbackID;
		
		private string _Name;
		
		private int _ActualGrade;
		
		private EntitySet<PMFeedback> _PMFeedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIDChanging(int value);
    partial void OnFeedbackIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActualGradeChanging(int value);
    partial void OnActualGradeChanged();
    #endregion
		
		public Feedback()
		{
			this._PMFeedbacks = new EntitySet<PMFeedback>(new Action<PMFeedback>(this.attach_PMFeedbacks), new Action<PMFeedback>(this.detach_PMFeedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualGrade", DbType="Int NOT NULL")]
		public int ActualGrade
		{
			get
			{
				return this._ActualGrade;
			}
			set
			{
				if ((this._ActualGrade != value))
				{
					this.OnActualGradeChanging(value);
					this.SendPropertyChanging();
					this._ActualGrade = value;
					this.SendPropertyChanged("ActualGrade");
					this.OnActualGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedback_PMFeedback", Storage="_PMFeedbacks", ThisKey="FeedbackID", OtherKey="FeedbackID")]
		public EntitySet<PMFeedback> PMFeedbacks
		{
			get
			{
				return this._PMFeedbacks;
			}
			set
			{
				this._PMFeedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = this;
		}
		
		private void detach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinancialManager")]
	public partial class FinancialManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FMID;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFMIDChanging(int value);
    partial void OnFMIDChanged();
    #endregion
		
		public FinancialManager()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FMID
		{
			get
			{
				return this._FMID;
			}
			set
			{
				if ((this._FMID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFMIDChanging(value);
					this.SendPropertyChanging();
					this._FMID = value;
					this.SendPropertyChanged("FMID");
					this.OnFMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FinancialManager", Storage="_Employee", ThisKey="FMID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FinancialManager = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FinancialManager = this;
						this._FMID = value.EmployeeID;
					}
					else
					{
						this._FMID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _ItemName;
		
		private int _UnitCost;
		
		private string _Description;
		
		private EntitySet<CaptureQuotation> _CaptureQuotations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnUnitCostChanging(int value);
    partial void OnUnitCostChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Item()
		{
			this._CaptureQuotations = new EntitySet<CaptureQuotation>(new Action<CaptureQuotation>(this.attach_CaptureQuotations), new Action<CaptureQuotation>(this.detach_CaptureQuotations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="Int NOT NULL")]
		public int UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CaptureQuotation", Storage="_CaptureQuotations", ThisKey="ItemID", OtherKey="ItemID")]
		public EntitySet<CaptureQuotation> CaptureQuotations
		{
			get
			{
				return this._CaptureQuotations;
			}
			set
			{
				this._CaptureQuotations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OMAssign")]
	public partial class OMAssign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OMID;
		
		private int _ProjectID;
		
		private int _PMID;
		
		private EntityRef<OperationalManager> _OperationalManager;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOMIDChanging(int value);
    partial void OnOMIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    #endregion
		
		public OMAssign()
		{
			this._OperationalManager = default(EntityRef<OperationalManager>);
			this._Project = default(EntityRef<Project>);
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OMID
		{
			get
			{
				return this._OMID;
			}
			set
			{
				if ((this._OMID != value))
				{
					if (this._OperationalManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOMIDChanging(value);
					this.SendPropertyChanging();
					this._OMID = value;
					this.SendPropertyChanged("OMID");
					this.OnOMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationalManager_OMAssign", Storage="_OperationalManager", ThisKey="OMID", OtherKey="OMID", IsForeignKey=true)]
		public OperationalManager OperationalManager
		{
			get
			{
				return this._OperationalManager.Entity;
			}
			set
			{
				OperationalManager previousValue = this._OperationalManager.Entity;
				if (((previousValue != value) 
							|| (this._OperationalManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationalManager.Entity = null;
						previousValue.OMAssigns.Remove(this);
					}
					this._OperationalManager.Entity = value;
					if ((value != null))
					{
						value.OMAssigns.Add(this);
						this._OMID = value.OMID;
					}
					else
					{
						this._OMID = default(int);
					}
					this.SendPropertyChanged("OperationalManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_OMAssign", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.OMAssigns.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.OMAssigns.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_OMAssign", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.OMAssigns.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.OMAssigns.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationalManager")]
	public partial class OperationalManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OMID;
		
		private EntitySet<OMAssign> _OMAssigns;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOMIDChanging(int value);
    partial void OnOMIDChanged();
    #endregion
		
		public OperationalManager()
		{
			this._OMAssigns = new EntitySet<OMAssign>(new Action<OMAssign>(this.attach_OMAssigns), new Action<OMAssign>(this.detach_OMAssigns));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OMID
		{
			get
			{
				return this._OMID;
			}
			set
			{
				if ((this._OMID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOMIDChanging(value);
					this.SendPropertyChanging();
					this._OMID = value;
					this.SendPropertyChanged("OMID");
					this.OnOMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationalManager_OMAssign", Storage="_OMAssigns", ThisKey="OMID", OtherKey="OMID")]
		public EntitySet<OMAssign> OMAssigns
		{
			get
			{
				return this._OMAssigns;
			}
			set
			{
				this._OMAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationalManager_Project", Storage="_Projects", ThisKey="OMID", OtherKey="OMID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OperationalManager", Storage="_Employee", ThisKey="OMID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OperationalManager = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OperationalManager = this;
						this._OMID = value.EmployeeID;
					}
					else
					{
						this._OMID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.OperationalManager = this;
		}
		
		private void detach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.OperationalManager = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.OperationalManager = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.OperationalManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutsourceLabor")]
	public partial class OutsourceLabor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutsourceGroupID;
		
		private string _GroupTitle;
		
		private int _Quantity;
		
		private string _Name;
		
		private int _UnitCost_Hour;
		
		private string _ContactPerson;
		
		private int _Mobile;
		
		private EntitySet<Recruit> _Recruits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutsourceGroupIDChanging(int value);
    partial void OnOutsourceGroupIDChanged();
    partial void OnGroupTitleChanging(string value);
    partial void OnGroupTitleChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitCost_HourChanging(int value);
    partial void OnUnitCost_HourChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnMobileChanging(int value);
    partial void OnMobileChanged();
    #endregion
		
		public OutsourceLabor()
		{
			this._Recruits = new EntitySet<Recruit>(new Action<Recruit>(this.attach_Recruits), new Action<Recruit>(this.detach_Recruits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutsourceGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutsourceGroupID
		{
			get
			{
				return this._OutsourceGroupID;
			}
			set
			{
				if ((this._OutsourceGroupID != value))
				{
					this.OnOutsourceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._OutsourceGroupID = value;
					this.SendPropertyChanged("OutsourceGroupID");
					this.OnOutsourceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupTitle
		{
			get
			{
				return this._GroupTitle;
			}
			set
			{
				if ((this._GroupTitle != value))
				{
					this.OnGroupTitleChanging(value);
					this.SendPropertyChanging();
					this._GroupTitle = value;
					this.SendPropertyChanged("GroupTitle");
					this.OnGroupTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[UnitCost/Hour]", Storage="_UnitCost_Hour", DbType="Int NOT NULL")]
		public int UnitCost_Hour
		{
			get
			{
				return this._UnitCost_Hour;
			}
			set
			{
				if ((this._UnitCost_Hour != value))
				{
					this.OnUnitCost_HourChanging(value);
					this.SendPropertyChanging();
					this._UnitCost_Hour = value;
					this.SendPropertyChanged("UnitCost_Hour");
					this.OnUnitCost_HourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Int NOT NULL")]
		public int Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutsourceLabor_Recruit", Storage="_Recruits", ThisKey="OutsourceGroupID", OtherKey="OutsourceGroupID")]
		public EntitySet<Recruit> Recruits
		{
			get
			{
				return this._Recruits;
			}
			set
			{
				this._Recruits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.OutsourceLabor = this;
		}
		
		private void detach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.OutsourceLabor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phase")]
	public partial class Phase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhaseID;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _ExpectedEndDate;
		
		private System.Nullable<System.DateTime> _ActualEndDate;
		
		private string _ReasonforDelay;
		
		private string _Description;
		
		private int _EstimatedCost;
		
		private System.Nullable<int> _ActualCost;
		
		private string _PhaseStatus;
		
		private System.DateTime _Duration;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<PhaseCheckpoint> _PhaseCheckpoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhaseIDChanging(int value);
    partial void OnPhaseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnExpectedEndDateChanging(System.DateTime value);
    partial void OnExpectedEndDateChanged();
    partial void OnActualEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualEndDateChanged();
    partial void OnReasonforDelayChanging(string value);
    partial void OnReasonforDelayChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstimatedCostChanging(int value);
    partial void OnEstimatedCostChanged();
    partial void OnActualCostChanging(System.Nullable<int> value);
    partial void OnActualCostChanged();
    partial void OnPhaseStatusChanging(string value);
    partial void OnPhaseStatusChanged();
    partial void OnDurationChanging(System.DateTime value);
    partial void OnDurationChanged();
    #endregion
		
		public Phase()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._PhaseCheckpoints = new EntitySet<PhaseCheckpoint>(new Action<PhaseCheckpoint>(this.attach_PhaseCheckpoints), new Action<PhaseCheckpoint>(this.detach_PhaseCheckpoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhaseID
		{
			get
			{
				return this._PhaseID;
			}
			set
			{
				if ((this._PhaseID != value))
				{
					this.OnPhaseIDChanging(value);
					this.SendPropertyChanging();
					this._PhaseID = value;
					this.SendPropertyChanged("PhaseID");
					this.OnPhaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpectedEndDate
		{
			get
			{
				return this._ExpectedEndDate;
			}
			set
			{
				if ((this._ExpectedEndDate != value))
				{
					this.OnExpectedEndDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedEndDate = value;
					this.SendPropertyChanged("ExpectedEndDate");
					this.OnExpectedEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualEndDate
		{
			get
			{
				return this._ActualEndDate;
			}
			set
			{
				if ((this._ActualEndDate != value))
				{
					this.OnActualEndDateChanging(value);
					this.SendPropertyChanging();
					this._ActualEndDate = value;
					this.SendPropertyChanged("ActualEndDate");
					this.OnActualEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonforDelay", DbType="VarChar(50)")]
		public string ReasonforDelay
		{
			get
			{
				return this._ReasonforDelay;
			}
			set
			{
				if ((this._ReasonforDelay != value))
				{
					this.OnReasonforDelayChanging(value);
					this.SendPropertyChanging();
					this._ReasonforDelay = value;
					this.SendPropertyChanged("ReasonforDelay");
					this.OnReasonforDelayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedCost", DbType="Int NOT NULL")]
		public int EstimatedCost
		{
			get
			{
				return this._EstimatedCost;
			}
			set
			{
				if ((this._EstimatedCost != value))
				{
					this.OnEstimatedCostChanging(value);
					this.SendPropertyChanging();
					this._EstimatedCost = value;
					this.SendPropertyChanged("EstimatedCost");
					this.OnEstimatedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCost", DbType="Int")]
		public System.Nullable<int> ActualCost
		{
			get
			{
				return this._ActualCost;
			}
			set
			{
				if ((this._ActualCost != value))
				{
					this.OnActualCostChanging(value);
					this.SendPropertyChanging();
					this._ActualCost = value;
					this.SendPropertyChanged("ActualCost");
					this.OnActualCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhaseStatus
		{
			get
			{
				return this._PhaseStatus;
			}
			set
			{
				if ((this._PhaseStatus != value))
				{
					this.OnPhaseStatusChanging(value);
					this.SendPropertyChanging();
					this._PhaseStatus = value;
					this.SendPropertyChanged("PhaseStatus");
					this.OnPhaseStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="DateTime NOT NULL")]
		public System.DateTime Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_Document", Storage="_Documents", ThisKey="PhaseID", OtherKey="PhaseID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_PhaseCheckpoint", Storage="_PhaseCheckpoints", ThisKey="PhaseID", OtherKey="PhaseID")]
		public EntitySet<PhaseCheckpoint> PhaseCheckpoints
		{
			get
			{
				return this._PhaseCheckpoints;
			}
			set
			{
				this._PhaseCheckpoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Phase = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Phase = null;
		}
		
		private void attach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.Phase = this;
		}
		
		private void detach_PhaseCheckpoints(PhaseCheckpoint entity)
		{
			this.SendPropertyChanging();
			entity.Phase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhaseCheckpoint")]
	public partial class PhaseCheckpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEID;
		
		private int _PhaseID;
		
		private int _CheckpointID;
		
		private EntityRef<Checkpoint> _Checkpoint;
		
		private EntityRef<Phase> _Phase;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnPhaseIDChanging(int value);
    partial void OnPhaseIDChanged();
    partial void OnCheckpointIDChanging(int value);
    partial void OnCheckpointIDChanged();
    #endregion
		
		public PhaseCheckpoint()
		{
			this._Checkpoint = default(EntityRef<Checkpoint>);
			this._Phase = default(EntityRef<Phase>);
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhaseID
		{
			get
			{
				return this._PhaseID;
			}
			set
			{
				if ((this._PhaseID != value))
				{
					if (this._Phase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhaseIDChanging(value);
					this.SendPropertyChanging();
					this._PhaseID = value;
					this.SendPropertyChanged("PhaseID");
					this.OnPhaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckpointID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CheckpointID
		{
			get
			{
				return this._CheckpointID;
			}
			set
			{
				if ((this._CheckpointID != value))
				{
					if (this._Checkpoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckpointIDChanging(value);
					this.SendPropertyChanging();
					this._CheckpointID = value;
					this.SendPropertyChanged("CheckpointID");
					this.OnCheckpointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Checkpoint_PhaseCheckpoint", Storage="_Checkpoint", ThisKey="CheckpointID", OtherKey="CheckpointID", IsForeignKey=true)]
		public Checkpoint Checkpoint
		{
			get
			{
				return this._Checkpoint.Entity;
			}
			set
			{
				Checkpoint previousValue = this._Checkpoint.Entity;
				if (((previousValue != value) 
							|| (this._Checkpoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Checkpoint.Entity = null;
						previousValue.PhaseCheckpoints.Remove(this);
					}
					this._Checkpoint.Entity = value;
					if ((value != null))
					{
						value.PhaseCheckpoints.Add(this);
						this._CheckpointID = value.CheckpointID;
					}
					else
					{
						this._CheckpointID = default(int);
					}
					this.SendPropertyChanged("Checkpoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_PhaseCheckpoint", Storage="_Phase", ThisKey="PhaseID", OtherKey="PhaseID", IsForeignKey=true)]
		public Phase Phase
		{
			get
			{
				return this._Phase.Entity;
			}
			set
			{
				Phase previousValue = this._Phase.Entity;
				if (((previousValue != value) 
							|| (this._Phase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phase.Entity = null;
						previousValue.PhaseCheckpoints.Remove(this);
					}
					this._Phase.Entity = value;
					if ((value != null))
					{
						value.PhaseCheckpoints.Add(this);
						this._PhaseID = value.PhaseID;
					}
					else
					{
						this._PhaseID = default(int);
					}
					this.SendPropertyChanged("Phase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_PhaseCheckpoint", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.PhaseCheckpoints.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.PhaseCheckpoints.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PMFeedback")]
	public partial class PMFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PMID;
		
		private int _ProjectID;
		
		private int _FeedbackID;
		
		private System.DateTime _DateofSubmission;
		
		private string _AdditionalComments;
		
		private int _WieghtedGrade;
		
		private EntityRef<Feedback> _Feedback;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnFeedbackIDChanging(int value);
    partial void OnFeedbackIDChanged();
    partial void OnDateofSubmissionChanging(System.DateTime value);
    partial void OnDateofSubmissionChanged();
    partial void OnAdditionalCommentsChanging(string value);
    partial void OnAdditionalCommentsChanged();
    partial void OnWieghtedGradeChanging(int value);
    partial void OnWieghtedGradeChanged();
    #endregion
		
		public PMFeedback()
		{
			this._Feedback = default(EntityRef<Feedback>);
			this._Project = default(EntityRef<Project>);
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					if (this._Feedback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofSubmission", DbType="DateTime NOT NULL")]
		public System.DateTime DateofSubmission
		{
			get
			{
				return this._DateofSubmission;
			}
			set
			{
				if ((this._DateofSubmission != value))
				{
					this.OnDateofSubmissionChanging(value);
					this.SendPropertyChanging();
					this._DateofSubmission = value;
					this.SendPropertyChanged("DateofSubmission");
					this.OnDateofSubmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalComments", DbType="VarChar(50)")]
		public string AdditionalComments
		{
			get
			{
				return this._AdditionalComments;
			}
			set
			{
				if ((this._AdditionalComments != value))
				{
					this.OnAdditionalCommentsChanging(value);
					this.SendPropertyChanging();
					this._AdditionalComments = value;
					this.SendPropertyChanged("AdditionalComments");
					this.OnAdditionalCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WieghtedGrade", DbType="Int NOT NULL")]
		public int WieghtedGrade
		{
			get
			{
				return this._WieghtedGrade;
			}
			set
			{
				if ((this._WieghtedGrade != value))
				{
					this.OnWieghtedGradeChanging(value);
					this.SendPropertyChanging();
					this._WieghtedGrade = value;
					this.SendPropertyChanged("WieghtedGrade");
					this.OnWieghtedGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedback_PMFeedback", Storage="_Feedback", ThisKey="FeedbackID", OtherKey="FeedbackID", IsForeignKey=true)]
		public Feedback Feedback
		{
			get
			{
				return this._Feedback.Entity;
			}
			set
			{
				Feedback previousValue = this._Feedback.Entity;
				if (((previousValue != value) 
							|| (this._Feedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feedback.Entity = null;
						previousValue.PMFeedbacks.Remove(this);
					}
					this._Feedback.Entity = value;
					if ((value != null))
					{
						value.PMFeedbacks.Add(this);
						this._FeedbackID = value.FeedbackID;
					}
					else
					{
						this._FeedbackID = default(int);
					}
					this.SendPropertyChanged("Feedback");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_PMFeedback", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.PMFeedbacks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.PMFeedbacks.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_PMFeedback", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.PMFeedbacks.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.PMFeedbacks.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _Name;
		
		private System.DateTime _ExpectedStartDate;
		
		private System.Nullable<System.DateTime> _ActualStartDate;
		
		private System.DateTime _ExpectedEndDate;
		
		private System.DateTime _ActualEndDate;
		
		private string _Status;
		
		private string _Description;
		
		private int _EstimatedCost;
		
		private System.Nullable<int> _ActualCost;
		
		private int _ClientID;
		
		private int _OMID;
		
		private EntitySet<Assign> _Assigns;
		
		private EntitySet<CaptureQuotation> _CaptureQuotations;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<OMAssign> _OMAssigns;
		
		private EntitySet<PMFeedback> _PMFeedbacks;
		
		private EntitySet<ProjectAttachment> _ProjectAttachments;
		
		private EntitySet<Recruit> _Recruits;
		
		private EntitySet<SubmittedBy> _SubmittedBies;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<OperationalManager> _OperationalManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExpectedStartDateChanging(System.DateTime value);
    partial void OnExpectedStartDateChanged();
    partial void OnActualStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualStartDateChanged();
    partial void OnExpectedEndDateChanging(System.DateTime value);
    partial void OnExpectedEndDateChanged();
    partial void OnActualEndDateChanging(System.DateTime value);
    partial void OnActualEndDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstimatedCostChanging(int value);
    partial void OnEstimatedCostChanged();
    partial void OnActualCostChanging(System.Nullable<int> value);
    partial void OnActualCostChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnOMIDChanging(int value);
    partial void OnOMIDChanged();
    #endregion
		
		public Project()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._CaptureQuotations = new EntitySet<CaptureQuotation>(new Action<CaptureQuotation>(this.attach_CaptureQuotations), new Action<CaptureQuotation>(this.detach_CaptureQuotations));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._OMAssigns = new EntitySet<OMAssign>(new Action<OMAssign>(this.attach_OMAssigns), new Action<OMAssign>(this.detach_OMAssigns));
			this._PMFeedbacks = new EntitySet<PMFeedback>(new Action<PMFeedback>(this.attach_PMFeedbacks), new Action<PMFeedback>(this.detach_PMFeedbacks));
			this._ProjectAttachments = new EntitySet<ProjectAttachment>(new Action<ProjectAttachment>(this.attach_ProjectAttachments), new Action<ProjectAttachment>(this.detach_ProjectAttachments));
			this._Recruits = new EntitySet<Recruit>(new Action<Recruit>(this.attach_Recruits), new Action<Recruit>(this.detach_Recruits));
			this._SubmittedBies = new EntitySet<SubmittedBy>(new Action<SubmittedBy>(this.attach_SubmittedBies), new Action<SubmittedBy>(this.detach_SubmittedBies));
			this._Client = default(EntityRef<Client>);
			this._OperationalManager = default(EntityRef<OperationalManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpectedStartDate
		{
			get
			{
				return this._ExpectedStartDate;
			}
			set
			{
				if ((this._ExpectedStartDate != value))
				{
					this.OnExpectedStartDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedStartDate = value;
					this.SendPropertyChanged("ExpectedStartDate");
					this.OnExpectedStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualStartDate
		{
			get
			{
				return this._ActualStartDate;
			}
			set
			{
				if ((this._ActualStartDate != value))
				{
					this.OnActualStartDateChanging(value);
					this.SendPropertyChanging();
					this._ActualStartDate = value;
					this.SendPropertyChanged("ActualStartDate");
					this.OnActualStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpectedEndDate
		{
			get
			{
				return this._ExpectedEndDate;
			}
			set
			{
				if ((this._ExpectedEndDate != value))
				{
					this.OnExpectedEndDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedEndDate = value;
					this.SendPropertyChanged("ExpectedEndDate");
					this.OnExpectedEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime ActualEndDate
		{
			get
			{
				return this._ActualEndDate;
			}
			set
			{
				if ((this._ActualEndDate != value))
				{
					this.OnActualEndDateChanging(value);
					this.SendPropertyChanging();
					this._ActualEndDate = value;
					this.SendPropertyChanged("ActualEndDate");
					this.OnActualEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedCost", DbType="Int NOT NULL")]
		public int EstimatedCost
		{
			get
			{
				return this._EstimatedCost;
			}
			set
			{
				if ((this._EstimatedCost != value))
				{
					this.OnEstimatedCostChanging(value);
					this.SendPropertyChanging();
					this._EstimatedCost = value;
					this.SendPropertyChanged("EstimatedCost");
					this.OnEstimatedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCost", DbType="Int")]
		public System.Nullable<int> ActualCost
		{
			get
			{
				return this._ActualCost;
			}
			set
			{
				if ((this._ActualCost != value))
				{
					this.OnActualCostChanging(value);
					this.SendPropertyChanging();
					this._ActualCost = value;
					this.SendPropertyChanged("ActualCost");
					this.OnActualCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OMID", DbType="Int NOT NULL")]
		public int OMID
		{
			get
			{
				return this._OMID;
			}
			set
			{
				if ((this._OMID != value))
				{
					if (this._OperationalManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOMIDChanging(value);
					this.SendPropertyChanging();
					this._OMID = value;
					this.SendPropertyChanged("OMID");
					this.OnOMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Assign", Storage="_Assigns", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CaptureQuotation", Storage="_CaptureQuotations", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<CaptureQuotation> CaptureQuotations
		{
			get
			{
				return this._CaptureQuotations;
			}
			set
			{
				this._CaptureQuotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Document", Storage="_Documents", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_OMAssign", Storage="_OMAssigns", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<OMAssign> OMAssigns
		{
			get
			{
				return this._OMAssigns;
			}
			set
			{
				this._OMAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_PMFeedback", Storage="_PMFeedbacks", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<PMFeedback> PMFeedbacks
		{
			get
			{
				return this._PMFeedbacks;
			}
			set
			{
				this._PMFeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAttachment", Storage="_ProjectAttachments", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this._ProjectAttachments;
			}
			set
			{
				this._ProjectAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Recruit", Storage="_Recruits", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<Recruit> Recruits
		{
			get
			{
				return this._Recruits;
			}
			set
			{
				this._Recruits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SubmittedBy", Storage="_SubmittedBies", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<SubmittedBy> SubmittedBies
		{
			get
			{
				return this._SubmittedBies;
			}
			set
			{
				this._SubmittedBies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationalManager_Project", Storage="_OperationalManager", ThisKey="OMID", OtherKey="OMID", IsForeignKey=true)]
		public OperationalManager OperationalManager
		{
			get
			{
				return this._OperationalManager.Entity;
			}
			set
			{
				OperationalManager previousValue = this._OperationalManager.Entity;
				if (((previousValue != value) 
							|| (this._OperationalManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationalManager.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._OperationalManager.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._OMID = value.OMID;
					}
					else
					{
						this._OMID = default(int);
					}
					this.SendPropertyChanged("OperationalManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Recruits(Recruit entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_SubmittedBies(SubmittedBy entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectAttachment")]
	public partial class ProjectAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private int _TEID;
		
		private int _AttachmentID;
		
		private EntityRef<Attachment> _Attachment;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    #endregion
		
		public ProjectAttachment()
		{
			this._Attachment = default(EntityRef<Attachment>);
			this._Project = default(EntityRef<Project>);
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					if (this._Attachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_ProjectAttachment", Storage="_Attachment", ThisKey="AttachmentID", OtherKey="AttachmentID", IsForeignKey=true)]
		public Attachment Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Attachment previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.ProjectAttachments.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachments.Add(this);
						this._AttachmentID = value.AttachmentID;
					}
					else
					{
						this._AttachmentID = default(int);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAttachment", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectAttachments.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachments.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_ProjectAttachment", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.ProjectAttachments.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachments.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectManager")]
	public partial class ProjectManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PMID;
		
		private EntitySet<Assign> _Assigns;
		
		private EntitySet<CaptureQuotation> _CaptureQuotations;
		
		private EntitySet<DesignDocument> _DesignDocuments;
		
		private EntitySet<OMAssign> _OMAssigns;
		
		private EntitySet<PMFeedback> _PMFeedbacks;
		
		private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    #endregion
		
		public ProjectManager()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._CaptureQuotations = new EntitySet<CaptureQuotation>(new Action<CaptureQuotation>(this.attach_CaptureQuotations), new Action<CaptureQuotation>(this.detach_CaptureQuotations));
			this._DesignDocuments = new EntitySet<DesignDocument>(new Action<DesignDocument>(this.attach_DesignDocuments), new Action<DesignDocument>(this.detach_DesignDocuments));
			this._OMAssigns = new EntitySet<OMAssign>(new Action<OMAssign>(this.attach_OMAssigns), new Action<OMAssign>(this.detach_OMAssigns));
			this._PMFeedbacks = new EntitySet<PMFeedback>(new Action<PMFeedback>(this.attach_PMFeedbacks), new Action<PMFeedback>(this.detach_PMFeedbacks));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_Assign", Storage="_Assigns", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_CaptureQuotation", Storage="_CaptureQuotations", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<CaptureQuotation> CaptureQuotations
		{
			get
			{
				return this._CaptureQuotations;
			}
			set
			{
				this._CaptureQuotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_DesignDocument", Storage="_DesignDocuments", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<DesignDocument> DesignDocuments
		{
			get
			{
				return this._DesignDocuments;
			}
			set
			{
				this._DesignDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_OMAssign", Storage="_OMAssigns", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<OMAssign> OMAssigns
		{
			get
			{
				return this._OMAssigns;
			}
			set
			{
				this._OMAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_PMFeedback", Storage="_PMFeedbacks", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<PMFeedback> PMFeedbacks
		{
			get
			{
				return this._PMFeedbacks;
			}
			set
			{
				this._PMFeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="PMID", OtherKey="PMID")]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectManager", Storage="_Employee", ThisKey="PMID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ProjectManager = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ProjectManager = this;
						this._PMID = value.EmployeeID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
		
		private void attach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_CaptureQuotations(CaptureQuotation entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
		
		private void attach_DesignDocuments(DesignDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_DesignDocuments(DesignDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
		
		private void attach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_OMAssigns(OMAssign entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
		
		private void attach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_PMFeedbacks(PMFeedback entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.ProjectManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrder")]
	public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderID;
		
		private System.DateTime _OrderDate;
		
		private int _OrderNumber;
		
		private string _Status;
		
		private int _PMID;
		
		private EntitySet<Submit> _Submits;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPMIDChanging(int value);
    partial void OnPMIDChanged();
    #endregion
		
		public PurchaseOrder()
		{
			this._Submits = new EntitySet<Submit>(new Action<Submit>(this.attach_Submits), new Action<Submit>(this.detach_Submits));
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int NOT NULL")]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMID", DbType="Int NOT NULL")]
		public int PMID
		{
			get
			{
				return this._PMID;
			}
			set
			{
				if ((this._PMID != value))
				{
					if (this._ProjectManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIDChanging(value);
					this.SendPropertyChanging();
					this._PMID = value;
					this.SendPropertyChanged("PMID");
					this.OnPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_Submit", Storage="_Submits", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID")]
		public EntitySet<Submit> Submits
		{
			get
			{
				return this._Submits;
			}
			set
			{
				this._Submits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectManager_PurchaseOrder", Storage="_ProjectManager", ThisKey="PMID", OtherKey="PMID", IsForeignKey=true)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._PMID = value.PMID;
					}
					else
					{
						this._PMID = default(int);
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = this;
		}
		
		private void detach_Submits(Submit entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recruits")]
	public partial class Recruit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEID;
		
		private int _ProjectID;
		
		private int _OutsourceGroupID;
		
		private int _NumberofLabors;
		
		private int _TotalCost;
		
		private string _ReasonForRecruitment;
		
		private EntityRef<OutsourceLabor> _OutsourceLabor;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnOutsourceGroupIDChanging(int value);
    partial void OnOutsourceGroupIDChanged();
    partial void OnNumberofLaborsChanging(int value);
    partial void OnNumberofLaborsChanged();
    partial void OnTotalCostChanging(int value);
    partial void OnTotalCostChanged();
    partial void OnReasonForRecruitmentChanging(string value);
    partial void OnReasonForRecruitmentChanged();
    #endregion
		
		public Recruit()
		{
			this._OutsourceLabor = default(EntityRef<OutsourceLabor>);
			this._Project = default(EntityRef<Project>);
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutsourceGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutsourceGroupID
		{
			get
			{
				return this._OutsourceGroupID;
			}
			set
			{
				if ((this._OutsourceGroupID != value))
				{
					if (this._OutsourceLabor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutsourceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._OutsourceGroupID = value;
					this.SendPropertyChanged("OutsourceGroupID");
					this.OnOutsourceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberofLabors", DbType="Int NOT NULL")]
		public int NumberofLabors
		{
			get
			{
				return this._NumberofLabors;
			}
			set
			{
				if ((this._NumberofLabors != value))
				{
					this.OnNumberofLaborsChanging(value);
					this.SendPropertyChanging();
					this._NumberofLabors = value;
					this.SendPropertyChanged("NumberofLabors");
					this.OnNumberofLaborsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Int NOT NULL")]
		public int TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonForRecruitment", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ReasonForRecruitment
		{
			get
			{
				return this._ReasonForRecruitment;
			}
			set
			{
				if ((this._ReasonForRecruitment != value))
				{
					this.OnReasonForRecruitmentChanging(value);
					this.SendPropertyChanging();
					this._ReasonForRecruitment = value;
					this.SendPropertyChanged("ReasonForRecruitment");
					this.OnReasonForRecruitmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutsourceLabor_Recruit", Storage="_OutsourceLabor", ThisKey="OutsourceGroupID", OtherKey="OutsourceGroupID", IsForeignKey=true)]
		public OutsourceLabor OutsourceLabor
		{
			get
			{
				return this._OutsourceLabor.Entity;
			}
			set
			{
				OutsourceLabor previousValue = this._OutsourceLabor.Entity;
				if (((previousValue != value) 
							|| (this._OutsourceLabor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutsourceLabor.Entity = null;
						previousValue.Recruits.Remove(this);
					}
					this._OutsourceLabor.Entity = value;
					if ((value != null))
					{
						value.Recruits.Add(this);
						this._OutsourceGroupID = value.OutsourceGroupID;
					}
					else
					{
						this._OutsourceGroupID = default(int);
					}
					this.SendPropertyChanged("OutsourceLabor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Recruit", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Recruits.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Recruits.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Recruit", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.Recruits.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.Recruits.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submits")]
	public partial class Submit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEID;
		
		private int _QuotationID;
		
		private int _PurchaseOrderID;
		
		private EntityRef<CaptureQuotation> _CaptureQuotation;
		
		private EntityRef<PurchaseOrder> _PurchaseOrder;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnQuotationIDChanging(int value);
    partial void OnQuotationIDChanged();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    #endregion
		
		public Submit()
		{
			this._CaptureQuotation = default(EntityRef<CaptureQuotation>);
			this._PurchaseOrder = default(EntityRef<PurchaseOrder>);
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuotationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuotationID
		{
			get
			{
				return this._QuotationID;
			}
			set
			{
				if ((this._QuotationID != value))
				{
					if (this._CaptureQuotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotationIDChanging(value);
					this.SendPropertyChanging();
					this._QuotationID = value;
					this.SendPropertyChanged("QuotationID");
					this.OnQuotationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaptureQuotation_Submit", Storage="_CaptureQuotation", ThisKey="QuotationID", OtherKey="QuotationID", IsForeignKey=true)]
		public CaptureQuotation CaptureQuotation
		{
			get
			{
				return this._CaptureQuotation.Entity;
			}
			set
			{
				CaptureQuotation previousValue = this._CaptureQuotation.Entity;
				if (((previousValue != value) 
							|| (this._CaptureQuotation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaptureQuotation.Entity = null;
						previousValue.Submits.Remove(this);
					}
					this._CaptureQuotation.Entity = value;
					if ((value != null))
					{
						value.Submits.Add(this);
						this._QuotationID = value.QuotationID;
					}
					else
					{
						this._QuotationID = default(int);
					}
					this.SendPropertyChanged("CaptureQuotation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_Submit", Storage="_PurchaseOrder", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID", IsForeignKey=true)]
		public PurchaseOrder PurchaseOrder
		{
			get
			{
				return this._PurchaseOrder.Entity;
			}
			set
			{
				PurchaseOrder previousValue = this._PurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrder.Entity = null;
						previousValue.Submits.Remove(this);
					}
					this._PurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.Submits.Add(this);
						this._PurchaseOrderID = value.PurchaseOrderID;
					}
					else
					{
						this._PurchaseOrderID = default(int);
					}
					this.SendPropertyChanged("PurchaseOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_Submit", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.Submits.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.Submits.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubmittedBy")]
	public partial class SubmittedBy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEID;
		
		private int _ProjectID;
		
		private int _DesignDocumentID;
		
		private EntityRef<DesignDocument> _DesignDocument;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEIDChanging(int value);
    partial void OnTEIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnDesignDocumentIDChanging(int value);
    partial void OnDesignDocumentIDChanged();
    #endregion
		
		public SubmittedBy()
		{
			this._DesignDocument = default(EntityRef<DesignDocument>);
			this._Project = default(EntityRef<Project>);
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TEID
		{
			get
			{
				return this._TEID;
			}
			set
			{
				if ((this._TEID != value))
				{
					if (this._TechnicalEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTEIDChanging(value);
					this.SendPropertyChanging();
					this._TEID = value;
					this.SendPropertyChanged("TEID");
					this.OnTEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DesignDocumentID
		{
			get
			{
				return this._DesignDocumentID;
			}
			set
			{
				if ((this._DesignDocumentID != value))
				{
					if (this._DesignDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DesignDocumentID = value;
					this.SendPropertyChanged("DesignDocumentID");
					this.OnDesignDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignDocument_SubmittedBy", Storage="_DesignDocument", ThisKey="DesignDocumentID", OtherKey="DesignDocumentID", IsForeignKey=true)]
		public DesignDocument DesignDocument
		{
			get
			{
				return this._DesignDocument.Entity;
			}
			set
			{
				DesignDocument previousValue = this._DesignDocument.Entity;
				if (((previousValue != value) 
							|| (this._DesignDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignDocument.Entity = null;
						previousValue.SubmittedBies.Remove(this);
					}
					this._DesignDocument.Entity = value;
					if ((value != null))
					{
						value.SubmittedBies.Add(this);
						this._DesignDocumentID = value.DesignDocumentID;
					}
					else
					{
						this._DesignDocumentID = default(int);
					}
					this.SendPropertyChanged("DesignDocument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SubmittedBy", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.SubmittedBies.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.SubmittedBies.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicalEmployee_SubmittedBy", Storage="_TechnicalEmployee", ThisKey="TEID", OtherKey="TEID", IsForeignKey=true)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.SubmittedBies.Remove(this);
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.SubmittedBies.Add(this);
						this._TEID = value.TEID;
					}
					else
					{
						this._TEID = default(int);
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _PhoneNumber;
		
		private int _MobileNumber;
		
		private string _Email;
		
		private string _EmployeeType;
		
		private string _Username;
		
		private string _Password;
		
		private string _HourRate;
		
		private string _RateCategory;
		
		private EntityRef<TechnicalEmployee> _TechnicalEmployee;
		
		private EntityRef<FinancialManager> _FinancialManager;
		
		private EntityRef<OperationalManager> _OperationalManager;
		
		private EntityRef<ProjectManager> _ProjectManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnMobileNumberChanging(int value);
    partial void OnMobileNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmployeeTypeChanging(string value);
    partial void OnEmployeeTypeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnHourRateChanging(string value);
    partial void OnHourRateChanged();
    partial void OnRateCategoryChanging(string value);
    partial void OnRateCategoryChanged();
    #endregion
		
		public Employee()
		{
			this._TechnicalEmployee = default(EntityRef<TechnicalEmployee>);
			this._FinancialManager = default(EntityRef<FinancialManager>);
			this._OperationalManager = default(EntityRef<OperationalManager>);
			this._ProjectManager = default(EntityRef<ProjectManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="Int NOT NULL")]
		public int MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeType
		{
			get
			{
				return this._EmployeeType;
			}
			set
			{
				if ((this._EmployeeType != value))
				{
					this.OnEmployeeTypeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeType = value;
					this.SendPropertyChanged("EmployeeType");
					this.OnEmployeeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourRate", DbType="VarChar(5)")]
		public string HourRate
		{
			get
			{
				return this._HourRate;
			}
			set
			{
				if ((this._HourRate != value))
				{
					this.OnHourRateChanging(value);
					this.SendPropertyChanging();
					this._HourRate = value;
					this.SendPropertyChanged("HourRate");
					this.OnHourRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateCategory", DbType="VarChar(50)")]
		public string RateCategory
		{
			get
			{
				return this._RateCategory;
			}
			set
			{
				if ((this._RateCategory != value))
				{
					this.OnRateCategoryChanging(value);
					this.SendPropertyChanging();
					this._RateCategory = value;
					this.SendPropertyChanged("RateCategory");
					this.OnRateCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TechnicalEmployee", Storage="_TechnicalEmployee", ThisKey="EmployeeID", OtherKey="TEID", IsUnique=true, IsForeignKey=false)]
		public TechnicalEmployee TechnicalEmployee
		{
			get
			{
				return this._TechnicalEmployee.Entity;
			}
			set
			{
				TechnicalEmployee previousValue = this._TechnicalEmployee.Entity;
				if (((previousValue != value) 
							|| (this._TechnicalEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicalEmployee.Entity = null;
						previousValue.Employee = null;
					}
					this._TechnicalEmployee.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("TechnicalEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FinancialManager", Storage="_FinancialManager", ThisKey="EmployeeID", OtherKey="FMID", IsUnique=true, IsForeignKey=false)]
		public FinancialManager FinancialManager
		{
			get
			{
				return this._FinancialManager.Entity;
			}
			set
			{
				FinancialManager previousValue = this._FinancialManager.Entity;
				if (((previousValue != value) 
							|| (this._FinancialManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancialManager.Entity = null;
						previousValue.Employee = null;
					}
					this._FinancialManager.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("FinancialManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OperationalManager", Storage="_OperationalManager", ThisKey="EmployeeID", OtherKey="OMID", IsUnique=true, IsForeignKey=false)]
		public OperationalManager OperationalManager
		{
			get
			{
				return this._OperationalManager.Entity;
			}
			set
			{
				OperationalManager previousValue = this._OperationalManager.Entity;
				if (((previousValue != value) 
							|| (this._OperationalManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationalManager.Entity = null;
						previousValue.Employee = null;
					}
					this._OperationalManager.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("OperationalManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectManager", Storage="_ProjectManager", ThisKey="EmployeeID", OtherKey="PMID", IsUnique=true, IsForeignKey=false)]
		public ProjectManager ProjectManager
		{
			get
			{
				return this._ProjectManager.Entity;
			}
			set
			{
				ProjectManager previousValue = this._ProjectManager.Entity;
				if (((previousValue != value) 
							|| (this._ProjectManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectManager.Entity = null;
						previousValue.Employee = null;
					}
					this._ProjectManager.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("ProjectManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
